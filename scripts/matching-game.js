// Generated by CoffeeScript 1.7.1

/*
--------------------------------------------
     Begin utilities.coffee
--------------------------------------------
 */

(function() {
  var MatchItem, applyTransform, easeInOutCubic, randomiseList, reflow, setNoTransitions, swapItems,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  randomiseList = function(arr) {
    var i, j, tempi, tempj;
    i = arr.length;
    if (i === 0) {
      return false;
    }
    while (--i) {
      j = Math.floor(Math.random() * (i + 1));
      tempi = arr[i];
      tempj = arr[j];
      arr[i] = tempj;
      arr[j] = tempi;
    }
    return arr;
  };

  reflow = (function(_this) {
    return function() {
      $('body').css('paddingLeft', $('body').css('paddingLeft'));
      return $('body').css('paddingLeft');
    };
  })(this);

  easeInOutCubic = (function(_this) {
    return function(t, b, c, d) {
      t /= d / 2;
      if (t < 1) {
        return c / 2 * t * t * t + b;
      }
      t -= 2;
      return c / 2 * (t * t * t + 2) + b;
    };
  })(this);

  swapItems = function(item1, item2, list) {
    var index1, index2, tempVal;
    index1 = list.indexOf(item1);
    index2 = list.indexOf(item2);
    tempVal = list[index2];
    list[index2] = list[index1];
    return list[index1] = tempVal;
  };

  applyTransform = (function(_this) {
    return function(item, transformString, transition, transDuration) {
      var transDurString;
      if (transition == null) {
        transition = false;
      }
      if (transDuration == null) {
        transDuration = 0.0;
      }
      if (transition) {
        transDurString = transDuration + ' ease';
        $(item).css({
          '-webkit-transition': '-webkit-transform ' + transDurString
        });
        $(item).css({
          'transition': 'transform ' + transDurString
        });
      }
      $(item).css({
        '-webkit-transform': transformString
      });
      return $(item).css({
        'transform': transformString
      });
    };
  })(this);

  setNoTransitions = function(item) {
    $(item).css({
      '-webkit-transition': 'none'
    });
    return $(item).css({
      'transition': 'none'
    });
  };


  /*
  --------------------------------------------
       Begin drag-n-shit-load.coffee
  --------------------------------------------
   */

  $(window).load(function() {
    var checkDuplicates, checkForScroll, computePositions, computeScaleValues, computeTransforms, initialise, lastMousePos, matchItems, mouseDown, mouseTarget, panel, setupClickables, setupMatchItems;
    mouseDown = false;
    mouseTarget = null;
    lastMousePos = {
      x: 0,
      y: 0
    };
    matchItems = [];
    panel = {
      pos: $('.panel').offset(),
      width: $('.panel').width(),
      height: $('.panel').height()
    };
    initialise = function() {
      var inter;
      setupMatchItems($('[matching]'));
      setupClickables();
      computePositions();
      return inter = setInterval(function() {
        checkForScroll();
        return clearInterval(inter);
      }, 3000);
    };
    setupClickables = function() {
      $('[matching]').css({
        'cursor': 'pointer'
      });
      $('.panelButton').css({
        'cursor': 'pointer'
      });
      $('[matching]').css({
        'pointer-events': 'none'
      });
      return $('.panelButton').css({
        'visibility': 'hidden'
      });
    };
    setupMatchItems = function(items) {
      var item, matchItem, _i, _len;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        matchItem = new MatchItem(item);
        matchItems.push(matchItem);
      }
      return randomiseList(matchItems);
    };
    computeTransforms = function(items, cont, padding, itemsWidth, isSetUp, animate) {
      var contOffset, currPad, item, transform, widthAdj, _i, _len, _results;
      if (isSetUp == null) {
        isSetUp = true;
      }
      if (animate == null) {
        animate = true;
      }
      currPad = 0;
      widthAdj = (cont.width - itemsWidth) / 2;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        transform = {
          x: cont.pos.left - item.offset.left,
          y: cont.pos.top - item.offset.top
        };
        contOffset = {
          x: currPad + widthAdj - (item.width - item.width * item.scale) / 2,
          y: ((cont.height - item.height * item.scale) / 2) - (item.height - item.height * item.scale) / 2
        };
        transform.x += contOffset.x;
        transform.y += contOffset.y;
        currPad += item.width * item.scale + padding;
        if (isSetUp) {
          _results.push(item.initialSetUp(transform, contOffset, animate));
        } else {
          _results.push(item.reSetUp(transform, contOffset, animate));
        }
      }
      return _results;
    };
    computeScaleValues = function(items, cont) {
      var item, padding, scaleX, scaleY, width, _i, _len;
      width = 0;
      padding = 40;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        scaleY = 1.0;
        scaleX = 1.0;
        if (item.height > cont.height * 0.95) {
          scaleY = cont.height / item.height;
        }
        if (item.width > 400) {
          scaleX = 400 / item.width;
        }
        item.scale = Math.min(scaleX, scaleY);
        width += item.width * item.scale;
      }
      width += (items.length - 1) * padding;
      return width;
    };
    computePositions = function(isSetUp, animate) {
      var width;
      if (isSetUp == null) {
        isSetUp = true;
      }
      if (animate == null) {
        animate = true;
      }
      panel = {
        pos: $('.panel').offset(),
        width: $('.panel').width(),
        height: $('.panel').height()
      };
      width = computeScaleValues(matchItems, panel);
      return computeTransforms(matchItems, panel, 40, width, isSetUp, animate);
    };
    checkDuplicates = function(matchAttr, transVector) {
      var currentTrans, item, oldMouseTarget, oldMouseX, oldMouseY, _i, _len;
      for (_i = 0, _len = matchItems.length; _i < _len; _i++) {
        item = matchItems[_i];
        if ($(item.item).attr("matching") === matchAttr) {
          currentTrans = {
            x: transVector.x - item.panelOffset.x,
            y: transVector.y - item.panelOffset.y
          };
          if (item.isClose(currentTrans)) {
            oldMouseTarget = mouseTarget;
            swapItems(item, mouseTarget, matchItems);
            mouseTarget = item;
            mouseTarget.translation = currentTrans;
            mouseTarget.currentScale = 1.0;
            mouseTarget.setTranslation({
              x: currentTrans.x + mouseTarget.panelTranslation.x,
              y: currentTrans.y + mouseTarget.panelTranslation.y
            });
            oldMouseX = oldMouseTarget.panelTranslation.x - oldMouseTarget.panelOffset.x + mouseTarget.panelOffset.x;
            oldMouseY = oldMouseTarget.panelTranslation.y - oldMouseTarget.panelOffset.y + mouseTarget.panelOffset.y;
            oldMouseTarget.currentScale = oldMouseTarget.scale;
            if (oldMouseTarget !== mouseTarget) {
              oldMouseTarget.setTranslation({
                x: oldMouseX,
                y: oldMouseY
              });
              oldMouseTarget.dragged = false;
              oldMouseTarget.moved = false;
            }
            reflow();
            return;
          }
        }
      }
    };
    checkForScroll = function(shift) {
      var item, offset, showLeft, showRight, width, _i, _len;
      if (shift == null) {
        shift = 0;
      }
      showLeft = false;
      showRight = false;
      for (_i = 0, _len = matchItems.length; _i < _len; _i++) {
        item = matchItems[_i];
        offset = $(item.item).offset();
        if (offset.left + shift < 0) {
          showLeft = true;
        }
        width = item.width * item.scale;
        if (offset.left + width + shift > panel.width) {
          showRight = true;
        }
      }
      if (showLeft) {
        $('.panelLeft').css('visibility', 'visible');
      } else {
        $('.panelLeft').css('visibility', 'hidden');
      }
      if (showRight) {
        return $('.panelRight').css('visibility', 'visible');
      } else {
        return $('.panelRight').css('visibility', 'hidden');
      }
    };
    $('.panelLeft').click(function() {
      var item, _i, _len;
      for (_i = 0, _len = matchItems.length; _i < _len; _i++) {
        item = matchItems[_i];
        item.shiftStart({
          x: 50,
          y: 0
        });
      }
      return checkForScroll(50);
    });
    $('.panelRight').click(function() {
      var item, _i, _len;
      for (_i = 0, _len = matchItems.length; _i < _len; _i++) {
        item = matchItems[_i];
        item.shiftStart({
          x: -50,
          y: 0
        });
      }
      return checkForScroll(-50);
    });
    $(window).mousedown(function(e) {
      var item, _i, _len;
      e.preventDefault();
      if (e.which !== 1) {
        return;
      }
      mouseTarget = null;
      for (_i = 0, _len = matchItems.length; _i < _len; _i++) {
        item = matchItems[_i];
        if ((e.target === item.item) && item.moved === false && e.target) {
          mouseDown = true;
          mouseTarget = item;
          if (mouseTarget) {
            mouseTarget.startDrag();
          }
          lastMousePos = {
            x: e.clientX,
            y: e.clientY
          };
          return;
        }
      }
    });
    $(window).mousemove(function(e) {
      var trans;
      e.preventDefault();
      if (mouseDown) {
        trans = {
          x: e.clientX - lastMousePos.x,
          y: e.clientY - lastMousePos.y
        };
        if (mouseTarget != null) {
          mouseTarget.drag(trans);
        }
        lastMousePos.x = e.clientX;
        return lastMousePos.y = e.clientY;
      }
    });
    $(window).mouseup(function(e) {
      var gameOver, mouseRelease, trans;
      e.preventDefault();
      if (mouseDown) {
        mouseDown = false;
        mouseRelease = false;
        trans = {
          x: mouseTarget.translation.x,
          y: mouseTarget.translation.y
        };
        trans.x += mouseTarget.panelOffset.x;
        trans.y += mouseTarget.panelOffset.y;
        checkDuplicates($(mouseTarget.item).attr("matching"), trans);
        if (mouseTarget != null) {
          mouseRelease = mouseTarget.release();
        }
        if (mouseTarget != null) {
          $(mouseTarget.item).blur();
        }
        if (mouseRelease) {
          matchItems.splice(matchItems.indexOf(mouseTarget), 1);
          if (matchItems.length === 0) {
            gameOver = new CustomEvent("gameover", {});
            window.dispatchEvent(gameOver);
          }
          computePositions(false);
          return checkForScroll(0);
        }
      }
    });
    $(window).resize(function() {
      var item, _i, _len;
      for (_i = 0, _len = matchItems.length; _i < _len; _i++) {
        item = matchItems[_i];
        item.update();
      }
      computePositions(false, false);
      return checkForScroll();
    });
    window.addEventListener('gameover', function() {
      return console.log("congratulations!!");
    });
    return initialise();
  });


  /*
  --------------------------------------------
       Begin drag-item.coffee
  --------------------------------------------
   */

  MatchItem = (function() {
    MatchItem.prototype.panelTranslation = {
      x: 0,
      y: 0
    };

    MatchItem.prototype.panelOffset = {
      x: 0,
      y: 0
    };

    MatchItem.prototype.translation = {
      x: 0,
      y: 0
    };

    MatchItem.prototype.scale = 0;

    MatchItem.prototype.currentScale = 0;

    MatchItem.prototype.width = 0;

    MatchItem.prototype.height = 0;

    MatchItem.prototype.offset = null;

    MatchItem.prototype.startTime = -1;

    MatchItem.prototype.dragging = false;

    MatchItem.prototype.moved = false;

    function MatchItem(item) {
      this.item = item;
      this.isClose = __bind(this.isClose, this);
      this.scaleChange = __bind(this.scaleChange, this);
      this.release = __bind(this.release, this);
      this.setTranslation = __bind(this.setTranslation, this);
      this.animateToPosition = __bind(this.animateToPosition, this);
      this.shiftStart = __bind(this.shiftStart, this);
      this.drag = __bind(this.drag, this);
      this.reSetUp = __bind(this.reSetUp, this);
      this.startDrag = __bind(this.startDrag, this);
      this.offset = $(this.item).offset();
      this.width = $(this.item).width();
      this.height = $(this.item).height();
    }

    MatchItem.prototype.update = function() {
      this.panelTranslation = {
        x: 0,
        y: 0
      };
      this.currentScale = 1.0;
      this.setTranslation({
        x: 0,
        y: 0
      });
      this.offset = $(this.item).offset();
      this.width = $(this.item).width();
      return this.height = $(this.item).height();
    };

    MatchItem.prototype.startDrag = function() {
      this.dragging = true;
      this.moved = true;
      return requestAnimationFrame(this.scaleChange);
    };

    MatchItem.prototype.initialSetUp = function(panelVector, contOffset) {
      var currScale, flashElement, i, _i;
      this.panelOffset = contOffset;
      this.currentScale = this.scale;
      flashElement = function(elm, duration) {
        elm.animate({
          opacity: 0.5
        }, duration / 2, 'linear');
        return elm.animate({
          opacity: 1.0
        }, duration / 2, 'linear');
      };
      for (i = _i = 0; _i <= 2; i = ++_i) {
        flashElement($(this.item), 500.0);
      }
      currScale = this.scale;
      $(this.item).animate({
        opacity: 1.0
      }, 10, 'linear', (function(_this) {
        return function() {
          _this.animateToPosition(panelVector, currScale, 0.5);
          return $(_this.item).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function() {
            $(_this.item).css({
              'transition': 'none'
            });
            return $(_this.item).css({
              'pointer-events': 'visible'
            });
          });
        };
      })(this));
      this.panelTranslation = panelVector;
      return this.translation = {
        x: 0,
        y: 0
      };
    };

    MatchItem.prototype.reSetUp = function(panelVector, contOffset, animate) {
      if (animate == null) {
        animate = true;
      }
      this.currentScale = this.scale;
      this.panelOffset = contOffset;
      if (animate) {
        this.animateToPosition(panelVector, this.scale, 0.5);
      } else {
        this.setTranslation(panelVector);
      }
      $(this.item).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', (function(_this) {
        return function() {
          return $(_this.item).css({
            'transition': 'none'
          });
        };
      })(this));
      this.panelTranslation = panelVector;
      return this.translation = {
        x: 0,
        y: 0
      };
    };

    MatchItem.prototype.drag = function(trans) {
      this.translation.x += trans.x;
      this.translation.y += trans.y;
      return this.setTranslation({
        x: this.translation.x + this.panelTranslation.x,
        y: this.translation.y + this.panelTranslation.y
      });
    };

    MatchItem.prototype.shiftStart = function(trans) {
      this.panelTranslation.x += trans.x;
      this.panelTranslation.y += trans.y;
      return this.animateToPosition(this.panelTranslation, this.scale, 0.5);
    };

    MatchItem.prototype.animateToPosition = function(trans, scale, duration) {
      var durString, scaleString, transString;
      transString = 'translate(' + trans.x + 'px,' + trans.y + 'px)';
      scaleString = 'scale(' + scale + ',' + scale + ')';
      durString = duration + 's';
      return applyTransform(this.item, transString + scaleString, true, durString);
    };

    MatchItem.prototype.setTranslation = function(trans) {
      var scaleString, scaleVal, transString;
      transString = 'translate(' + trans.x + 'px,' + trans.y + 'px)';
      scaleVal = this.currentScale;
      scaleString = 'scale(' + scaleVal + ',' + scaleVal + ')';
      return applyTransform(this.item, transString + scaleString);
    };

    MatchItem.prototype.release = function(trans) {
      var scaleString, transString, useTransition;
      if (trans == null) {
        trans = this.translation;
      }
      this.dragging = false;
      if (this.isClose(trans)) {
        this.currentScale = 1.0;
        this.scale = 1.0;
        $(this.item).css({
          'cursor': 'default'
        });
        applyTransform(this.item, 'translate(0, 0)', true, '0.25s');
        $(this.item).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', (function(_this) {
          return function() {
            return $(_this.item).css({
              'transition': 'none'
            });
          };
        })(this));
        return true;
      } else {
        transString = 'translate(' + this.panelTranslation.x + 'px,' + this.panelTranslation.y + 'px)';
        scaleString = ' scale(' + this.scale + ',' + this.scale + ')';
        useTransition = true;
        if ((this.currentScale === this.scale) && (this.translation.x === 0 && this.translation.y === 0)) {
          useTransition = false;
          this.moved = false;
        }
        applyTransform(this.item, transString + scaleString, useTransition, '0.25s');
        $(this.item).one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', (function(_this) {
          return function() {
            setNoTransitions(_this.item);
            return _this.moved = false;
          };
        })(this));
        this.translation.x = 0;
        this.translation.y = 0;
        return false;
      }
    };

    MatchItem.prototype.scaleChange = function(time) {
      var duration, easeFunc, timeDiff;
      duration = 200;
      if (this.startTime < 0) {
        this.startTime = time;
      }
      timeDiff = time - this.startTime;
      easeFunc = easeInOutCubic;
      if (!this.dragging) {
        this.currentScale = this.scale;
      }
      if (timeDiff < duration) {
        if (this.dragging) {
          this.currentScale = easeFunc(timeDiff, this.scale, 1.0 - this.scale, duration);
        }
        this.setTranslation({
          x: this.translation.x + this.panelTranslation.x,
          y: this.translation.y + this.panelTranslation.y
        });
        return requestAnimationFrame(this.scaleChange);
      } else {
        return this.startTime = -1;
      }
    };

    MatchItem.prototype.isClose = function(trans) {
      var dist;
      dist = Math.sqrt(Math.pow(-trans.x - this.panelTranslation.x, 2) + Math.pow(-trans.y - this.panelTranslation.y, 2));
      return dist < Math.sqrt(Math.pow(this.width, 2) + Math.pow(this.height, 2)) / 4;
    };

    return MatchItem;

  })();


  /*
  --------------------------------------------
       Begin drag-n-shit.coffee
  --------------------------------------------
   */

}).call(this);
