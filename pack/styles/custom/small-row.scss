small-row {
  display: flex;
  
  $space: .5em;
  
  flex-flow: row nowrap;
  
  // This looks super nice when placed in a row above a paragraph.
  h1 { text-align: left; }
  
  // Row: X alignment
  &,
  &[row~="center"]        { justify-content: center; }
  &[row~="left"]          { justify-content: flex-start; }
  &[row~="right"]         { justify-content: flex-end; }
  &[row~="space-around"]  { justify-content: space-around; }
  &[row~="space-between"] { justify-content: space-between; }
  
  // Row: Y size & alignment
  &,
  &[row~="center"]   { align-items: center; }
  &[row~="top"]      { align-items: flex-start; }
  &[row~="bottom"]   { align-items: flex-end; }
  &[row~="stretch"]  { align-items: stretch; }
  &[row~="baseline"] { align-items: baseline; }
  
  // Item in row: X size
  & > *             { flex: 0 1 auto; width: inherit; } // Shrink to fit content
  & > [row~="1/1"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/2"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
  & > [row~="2/2"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/3"]  { flex: 0 0 auto; width: calc(33.3% - #{$space * 2}); }
  & > [row~="2/3"]  { flex: 0 0 auto; width: calc(66.6% - #{$space * 2}); }
  & > [row~="3/3"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/4"]  { flex: 0 0 auto; width: calc(25% - #{$space * 2}); }
  & > [row~="2/4"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
  & > [row~="3/4"]  { flex: 0 0 auto; width: calc(75% - #{$space * 2}); }
  & > [row~="4/4"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/5"]  { flex: 0 0 auto; width: calc(20% - #{$space * 2}); }
  & > [row~="2/5"]  { flex: 0 0 auto; width: calc(40% - #{$space * 2}); }
  & > [row~="3/5"]  { flex: 0 0 auto; width: calc(60% - #{$space * 2}); }
  & > [row~="4/5"]  { flex: 0 0 auto; width: calc(80% - #{$space * 2}); }
  & > [row~="5/5"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/6"]  { flex: 0 0 auto; width: calc(16.6% - #{$space * 2}); }
  & > [row~="2/6"]  { flex: 0 0 auto; width: calc(33.3% - #{$space * 2}); }
  & > [row~="3/6"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
  & > [row~="4/6"]  { flex: 0 0 auto; width: calc(66.6% - #{$space * 2}); }
  & > [row~="5/6"]  { flex: 0 0 auto; width: calc(83.3% - #{$space * 2}); }
  & > [row~="6/6"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/7"]  { flex: 0 0 auto; width: calc(14.3% - #{$space * 2}); }
  & > [row~="2/7"]  { flex: 0 0 auto; width: calc(28.6% - #{$space * 2}); }
  & > [row~="3/7"]  { flex: 0 0 auto; width: calc(42.9% - #{$space * 2}); }
  & > [row~="4/7"]  { flex: 0 0 auto; width: calc(57.1% - #{$space * 2}); }
  & > [row~="5/7"]  { flex: 0 0 auto; width: calc(71.4% - #{$space * 2}); }
  & > [row~="6/7"]  { flex: 0 0 auto; width: calc(85.7% - #{$space * 2}); }
  & > [row~="7/7"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/8"]  { flex: 0 0 auto; width: calc(12.5% - #{$space * 2}); }
  & > [row~="2/8"]  { flex: 0 0 auto; width: calc(25% - #{$space * 2}); }
  & > [row~="3/8"]  { flex: 0 0 auto; width: calc(37.5% - #{$space * 2}); }
  & > [row~="4/8"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
  & > [row~="5/8"]  { flex: 0 0 auto; width: calc(62.5% - #{$space * 2}); }
  & > [row~="6/8"]  { flex: 0 0 auto; width: calc(75% - #{$space * 2}); }
  & > [row~="7/8"]  { flex: 0 0 auto; width: calc(87.5% - #{$space * 2}); }
  & > [row~="8/8"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  & > [row~="1/16"]  { flex: 0 0 auto; width: calc(6.25% - #{$space * 2}); }
  & > [row~="2/16"]  { flex: 0 0 auto; width: calc(12.5% - #{$space * 2}); }
  & > [row~="3/16"]  { flex: 0 0 auto; width: calc(18.75% - #{$space * 2}); }
  & > [row~="4/16"]  { flex: 0 0 auto; width: calc(25% - #{$space * 2}); }
  & > [row~="5/16"]  { flex: 0 0 auto; width: calc(31.25% - #{$space * 2}); }
  & > [row~="6/16"]  { flex: 0 0 auto; width: calc(37.5% - #{$space * 2}); }
  & > [row~="7/16"]  { flex: 0 0 auto; width: calc(43.75% - #{$space * 2}); }
  & > [row~="8/16"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
  & > [row~="9/16"]  { flex: 0 0 auto; width: calc(56.25% - #{$space * 2}); }
  & > [row~="10/16"]  { flex: 0 0 auto; width: calc(62.5% - #{$space * 2}); }
  & > [row~="11/16"]  { flex: 0 0 auto; width: calc(68.75% - #{$space * 2}); }
  & > [row~="12/16"]  { flex: 0 0 auto; width: calc(75% - #{$space * 2}); }
  & > [row~="13/16"]  { flex: 0 0 auto; width: calc(81.25% - #{$space * 2}); }
  & > [row~="14/16"]  { flex: 0 0 auto; width: calc(87.5% - #{$space * 2}); }
  & > [row~="15/16"]  { flex: 0 0 auto; width: calc(93.75% - #{$space * 2}); }
  & > [row~="16/16"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
  // All of the above use width rather than flex-basis: https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
  & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
  & > p { max-width: 100%; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
  & > * { min-width: 0%; } // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
  
  // Item in row: Y size & alignment
  & > [row~="top"]      { align-self: flex-start; }
  & > [row~="center"]   { align-self: center; }
  & > [row~="bottom"]   { align-self: flex-end; }
  & > [row~="stretch"]  { align-self: stretch; }
  & > [row~="baseline"] { align-self: baseline; }
  
}
