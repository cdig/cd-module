cd-row {
  display: flex;
  
  @media (min-width: $iPhoneLandscape + 1) {
    $space: 1em;
    
    flex-flow: row nowrap;
    margin-top: 2em;
    margin-left: -$space;
    margin-right: -$space;
    
    & > *,
    & > cd-text-bubble,
    & > center-block,
    & > h1, & > h2, & > h3, & > h4, & > h5, & > h6,
    & > p,
    & > ul, & > ol {
      margin-left: $space;
      margin-right: $space;
    }
    
    // This looks super nice when placed in a row above a paragraph.
    h1 { text-align: left; }
    
    &.text {
      align-items: flex-start;
      
      // This is the same as row="1x", which works nicely for text columns
      & > * { flex: 1 1 auto; width: 0%; }
    }
    
    // Row: X alignment
    &,
    &[row~="center"]        { justify-content: center; }
    &[row~="left"]          { justify-content: flex-start; }
    &[row~="right"]         { justify-content: flex-end; }
    &[row~="space-around"]  { justify-content: space-around; }
    &[row~="space-between"] { justify-content: space-between; }
    
    // Row: Y size & alignment
    &,
    &[row~="center"]   { align-items: center; }
    &[row~="top"]      { align-items: flex-start; }
    &[row~="bottom"]   { align-items: flex-end; }
    &[row~="stretch"]  { align-items: stretch; }
    &[row~="baseline"] { align-items: baseline; }
    
    // Item in row: X size
    & > *             { flex: 0 1 auto; width: inherit; } // Shrink to fit content
    & > [row~="1/1"]  { flex: 0 0 auto; width: calc(100% - #{$space * 2}); }
    & > [row~="1/2"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
    & > [row~="1/3"]  { flex: 0 0 auto; width: calc(33.3% - #{$space * 2}); }
    & > [row~="2/3"]  { flex: 0 0 auto; width: calc(66.6% - #{$space * 2}); }
    & > [row~="1/4"]  { flex: 0 0 auto; width: calc(25% - #{$space * 2}); }
    & > [row~="2/4"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
    & > [row~="3/4"]  { flex: 0 0 auto; width: calc(75% - #{$space * 2}); }
    & > [row~="1/5"]  { flex: 0 0 auto; width: calc(20% - #{$space * 2}); }
    & > [row~="2/5"]  { flex: 0 0 auto; width: calc(40% - #{$space * 2}); }
    & > [row~="3/5"]  { flex: 0 0 auto; width: calc(60% - #{$space * 2}); }
    & > [row~="4/5"]  { flex: 0 0 auto; width: calc(80% - #{$space * 2}); }
    & > [row~="1/6"]  { flex: 0 0 auto; width: calc(16.6% - #{$space * 2}); }
    & > [row~="2/6"]  { flex: 0 0 auto; width: calc(33.3% - #{$space * 2}); }
    & > [row~="3/6"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
    & > [row~="4/6"]  { flex: 0 0 auto; width: calc(66.6% - #{$space * 2}); }
    & > [row~="5/6"]  { flex: 0 0 auto; width: calc(83.3% - #{$space * 2}); }
    & > [row~="1/7"]  { flex: 0 0 auto; width: calc(14.3% - #{$space * 2}); }
    & > [row~="2/7"]  { flex: 0 0 auto; width: calc(28.6% - #{$space * 2}); }
    & > [row~="3/7"]  { flex: 0 0 auto; width: calc(42.9% - #{$space * 2}); }
    & > [row~="4/7"]  { flex: 0 0 auto; width: calc(57.1% - #{$space * 2}); }
    & > [row~="5/7"]  { flex: 0 0 auto; width: calc(71.4% - #{$space * 2}); }
    & > [row~="6/7"]  { flex: 0 0 auto; width: calc(85.7% - #{$space * 2}); }
    & > [row~="1/8"]  { flex: 0 0 auto; width: calc(12.5% - #{$space * 2}); }
    & > [row~="2/8"]  { flex: 0 0 auto; width: calc(25% - #{$space * 2}); }
    & > [row~="3/8"]  { flex: 0 0 auto; width: calc(37.5% - #{$space * 2}); }
    & > [row~="4/8"]  { flex: 0 0 auto; width: calc(50% - #{$space * 2}); }
    & > [row~="5/8"]  { flex: 0 0 auto; width: calc(62.5% - #{$space * 2}); }
    & > [row~="6/8"]  { flex: 0 0 auto; width: calc(75% - #{$space * 2}); }
    & > [row~="7/8"]  { flex: 0 0 auto; width: calc(87.5% - #{$space * 2}); }
    // All of the above use width rather than flex-basis: https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
    & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
    & > p { max-width: 100%; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
    & > * { min-width: 0%; } // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
    
    // Item in row: Y size & alignment
    & > [row~="top"]      { align-self: flex-start; }
    & > [row~="center"]   { align-self: center; }
    & > [row~="bottom"]   { align-self: flex-end; }
    & > [row~="stretch"]  { align-self: stretch; }
    & > [row~="baseline"] { align-self: baseline; }
    
    // Item in row: ordering
    & > *,
    & > [row~="3rd"] { order: 3; }
    & > [row~="1st"] { order: 1; }
    & > [row~="2nd"] { order: 2; }
    & > [row~="4th"] { order: 4; }
    & > [row~="5th"] { order: 5; }
  }
  
  @media (max-width: $iPhoneLandscape) {
    flex-direction: column;
    
    & > *,
    & > [row],
    & > cd-text-bubble,
    & > cd-map,
    & > p,
    & > ol,
    & > ul {
      margin-top: 2em;
    }
    
    // Column: X alignment
    &,
    &[col~="center"]        { align-items: center; }
    &[col~="left"]          { align-items: flex-start; }
    &[col~="right"]         { align-items: flex-end; }
    
    & > p, // The below rule doesn't hit "p" elements, since they're included after this file at an equal specificity
    & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
    
    // Item in column: X size
    & > [col~="1/2"]  { max-width: 50%; }
    & > [col~="1/3"]  { max-width: 33.3%; }
    & > [col~="2/3"]  { max-width: 66.6%; }
    & > [col~="1/4"]  { max-width: 25%; }
    & > [col~="2/4"]  { max-width: 50%; }
    & > [col~="3/4"]  { max-width: 75%; }
    & > [col~="1/5"]  { max-width: 20%; }
    & > [col~="2/5"]  { max-width: 40%; }
    & > [col~="3/5"]  { max-width: 60%; }
    & > [col~="4/5"]  { max-width: 80%; }
    & > [col~="1/6"]  { max-width: 16.6%; }
    & > [col~="2/6"]  { max-width: 33.3%; }
    & > [col~="3/6"]  { max-width: 50%; }
    & > [col~="4/6"]  { max-width: 66.6%; }
    & > [col~="5/6"]  { max-width: 83.3%; }
    & > [col~="1/7"]  { max-width: 14.3%; }
    & > [col~="2/7"]  { max-width: 28.6%; }
    & > [col~="3/7"]  { max-width: 42.9%; }
    & > [col~="4/7"]  { max-width: 57.1%; }
    & > [col~="5/7"]  { max-width: 71.4%; }
    & > [col~="6/7"]  { max-width: 85.7%; }
    & > [col~="1/8"]  { max-width: 12.5%; }
    & > [col~="2/8"]  { max-width: 25%; }
    & > [col~="3/8"]  { max-width: 37.5%; }
    & > [col~="4/8"]  { max-width: 50%; }
    & > [col~="5/8"]  { max-width: 62.5%; }
    & > [col~="6/8"]  { max-width: 75%; }
    & > [col~="7/8"]  { max-width: 87.5%; }
    
    // Disabled because I don't think we have this problem
    // & > * { min-width: 0%; } // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
    
    // Item in column: X size & alignment
    & > [col~="center"]   { align-self: center; }
    & > [col~="left"]     { align-self: flex-start; }
    & > [col~="right"]    { align-self: flex-end; }
    // & > [col~="stretch"]  { align-self: stretch; }
    
    // Item in column: ordering
    & > *,
    & > [col~="3rd"] { order: 3; }
    & > [col~="1st"] { order: 1; }
    & > [col~="2nd"] { order: 2; }
    & > [col~="4th"] { order: 4; }
    & > [col~="5th"] { order: 5; }
  }
}
