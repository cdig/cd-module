cd-row {
  display: flex;
  flex-flow: row nowrap;
  
  // CONTAINER AS ROW: X alignment
  justify-content: space-around;
  &[row~="center"]        { justify-content: center; } // Must come first: it applies to both X and Y and needs to be easily overridden
  &[row~="left"]          { justify-content: flex-start; }
  &[row~="right"]         { justify-content: flex-end; }
  &[row~="space-around"]  { justify-content: space-around; }  // DEFAULT
  &[row~="space-between"] { justify-content: space-between; }
  
  // CONTAINER AS ROW: Y size & alignment
  align-items: center;
  &.text { align-items: flex-start; }
  &[row~="center"]   { align-items: center; } // DEFAULT, must come first: it applies to both X and Y and needs to be easily overridden
  &[row~="top"]      { align-items: flex-start; }
  &[row~="bottom"]   { align-items: flex-end; }
  &[row~="stretch"]  { align-items: stretch; } // Matches largest item
  &[row~="baseline"] { align-items: baseline; }
  
  // ITEM IN ROW: X size
  & > *         { flex: 1 1 auto; width: 0%; } // Grow to fit available space
  & > [row~="Sx"]   { flex: 0 1 auto; width: inherit; } // Shrink to fit content
  & > [row~="1x"]   { flex: 1 1 auto; width: 0%; } // DEFAULT
  & > [row~="2x"]   { flex: 2 1 auto; width: 0%; }
  & > [row~="3x"]   { flex: 3 1 auto; width: 0%; }
  & > [row~="4x"]   { flex: 4 1 auto; width: 0%; }
  & > [row~="5x"]   { flex: 5 1 auto; width: 0%; }
  & > [row~="1/2"]  { flex: 0 0 auto; width: 50%; }
  & > [row~="1/3"]  { flex: 0 0 auto; width: 33%; }
  & > [row~="2/3"]  { flex: 0 0 auto; width: 66%; }
  & > [row~="1/4"]  { flex: 0 0 auto; width: 25%; }
  & > [row~="2/4"]  { flex: 0 0 auto; width: 50%; }
  & > [row~="3/4"]  { flex: 0 0 auto; width: 75%; }
  & > [row~="1/5"]  { flex: 0 0 auto; width: 20%; }
  & > [row~="2/5"]  { flex: 0 0 auto; width: 40%; }
  & > [row~="3/5"]  { flex: 0 0 auto; width: 60%; }
  & > [row~="4/5"]  { flex: 0 0 auto; width: 80%; }
  // All of the above use width rather than flex-basis: https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
  & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
  & > p { max-width: 100%; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
  & > * { min-width: 0%; } // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
  
  // ITEM IN ROW: Y size & alignment
  & > [row~="top"]      { align-self: flex-start; }
  & > [row~="center"]   { align-self: center; } // DEFAULT
  & > [row~="bottom"]   { align-self: flex-end; }
  & > [row~="stretch"]  { align-self: stretch; } // Matches largest item
  & > [row~="baseline"] { align-self: baseline; }
  
  // ITEM IN ROW: ordering
  & > *        { order: 1; }
  & > [row~="1st"] { order: 1; } // DEFAULT
  & > [row~="2nd"] { order: 2; }
  & > [row~="3rd"] { order: 3; }
  & > [row~="4th"] { order: 4; }
  & > [row~="5th"] { order: 5; }
  
  @media (max-width: $iPhoneLandscape - 1) {
    // display: block;
    flex-flow: row wrap;
    justify-content: center;
    
    & > *, & > [row] {
      flex: 1 1 100%;
      width: auto;
      min-width: none;
      max-width: none;
      margin: 0 auto;
      & + * { margin-top: 1.5em; }
    }
    
    & > [row] {
      display: flex;
      flex-flow: row wrap;
      justify-content: center;
      
      & > * {
        flex: 1 1 100%;
      }
    }
    
    & > [row] > svg,
    & > [row] > img {
      flex: 0 0 auto;
      width: auto;
      height: auto;
      max-width: 100vw;
      max-height: 100vh;
    }
  }
}
