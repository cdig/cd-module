cd-row {
  display: flex;
  flex-flow: row nowrap;
  margin-top: 1em;
  margin-left: -.75em;
  margin-right: -.75em;
  
  & > *,
  & > [row],
  & > cd-text-bubble,
  & > cd-map,
  & > p,
  & > ol,
  & > ul {
    margin-left: .75em;
    margin-right: .75em;
  }

  // Row: X alignment
  justify-content: center;
  &[row~="center"]        { justify-content: center; } // Must come first: it applies to both X and Y and needs to be easily overridden
  &[row~="left"]          { justify-content: flex-start; }
  &[row~="right"]         { justify-content: flex-end; }
  &[row~="space-around"]  { justify-content: space-around; }
  &[row~="space-between"] { justify-content: space-between; }
  
  // Row: Y size & alignment
  align-items: center;
  &.text { align-items: flex-start; }
  &[row~="center"]   { align-items: center; } // DEFAULT - must come first: it needs to be easily overridden
  &[row~="top"]      { align-items: flex-start; }
  &[row~="bottom"]   { align-items: flex-end; }
  &[row~="stretch"]  { align-items: stretch; } // Matches largest item
  &[row~="baseline"] { align-items: baseline; }
  
  // Item in row: X size
  & > *,
  & > [row~="Sx"]   { flex: 0 1 auto; width: inherit; } // DEFAULT - Shrink to fit content
  & > [row~="1x"]   { flex: 1 1 auto; width: 0%; }
  & > [row~="2x"]   { flex: 2 1 auto; width: 0%; }
  & > [row~="3x"]   { flex: 3 1 auto; width: 0%; }
  & > [row~="4x"]   { flex: 4 1 auto; width: 0%; }
  & > [row~="5x"]   { flex: 5 1 auto; width: 0%; }
  & > [row~="1/2"]  { flex: 0 0 auto; width: 50%; }
  & > [row~="1/3"]  { flex: 0 0 auto; width: 33.3%; }
  & > [row~="2/3"]  { flex: 0 0 auto; width: 66.6%; }
  & > [row~="1/4"]  { flex: 0 0 auto; width: 25%; }
  & > [row~="2/4"]  { flex: 0 0 auto; width: 50%; }
  & > [row~="3/4"]  { flex: 0 0 auto; width: 75%; }
  & > [row~="1/5"]  { flex: 0 0 auto; width: 20%; }
  & > [row~="2/5"]  { flex: 0 0 auto; width: 40%; }
  & > [row~="3/5"]  { flex: 0 0 auto; width: 60%; }
  & > [row~="4/5"]  { flex: 0 0 auto; width: 80%; }
  & > [row~="1/6"]  { flex: 0 0 auto; width: 16.6%; }
  & > [row~="2/6"]  { flex: 0 0 auto; width: 33.3%; }
  & > [row~="3/6"]  { flex: 0 0 auto; width: 50%; }
  & > [row~="4/6"]  { flex: 0 0 auto; width: 66.6%; }
  & > [row~="5/6"]  { flex: 0 0 auto; width: 83.3%; }
  & > [row~="1/7"]  { flex: 0 0 auto; width: 14.3%; }
  & > [row~="2/7"]  { flex: 0 0 auto; width: 28.6%; }
  & > [row~="3/7"]  { flex: 0 0 auto; width: 42.9%; }
  & > [row~="4/7"]  { flex: 0 0 auto; width: 57.1%; }
  & > [row~="5/7"]  { flex: 0 0 auto; width: 71.4%; }
  & > [row~="6/7"]  { flex: 0 0 auto; width: 85.7%; }
  & > [row~="1/8"]  { flex: 0 0 auto; width: 12.5%; }
  & > [row~="2/8"]  { flex: 0 0 auto; width: 25%; }
  & > [row~="3/8"]  { flex: 0 0 auto; width: 37.5%; }
  & > [row~="4/8"]  { flex: 0 0 auto; width: 50%; }
  & > [row~="5/8"]  { flex: 0 0 auto; width: 62.5%; }
  & > [row~="6/8"]  { flex: 0 0 auto; width: 75%; }
  & > [row~="7/8"]  { flex: 0 0 auto; width: 87.5%; }
  // All of the above use width rather than flex-basis: https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
  & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
  & > p { max-width: 100%; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
  & > * { min-width: 0%; } // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
  
  // Item in row: Y size & alignment
  & > [row~="top"]      { align-self: flex-start; }
  & > [row~="center"]   { align-self: center; } // DEFAULT
  & > [row~="bottom"]   { align-self: flex-end; }
  & > [row~="stretch"]  { align-self: stretch; } // Matches largest item
  & > [row~="baseline"] { align-self: baseline; }
  
  // Item in row: ordering
  & > *            { order: 1; }
  & > [row~="1st"] { order: 1; } // DEFAULT
  & > [row~="2nd"] { order: 2; }
  & > [row~="3rd"] { order: 3; }
  & > [row~="4th"] { order: 4; }
  & > [row~="5th"] { order: 5; }
  
  @media (max-width: $iPhoneLandscape) {
    flex-flow: row wrap;
    justify-content: center;
    max-width: none!important;
    width: auto!important;
    margin-left: 0;
    margin-right: 0;
    
    & > *,
    & > [row] {
      flex: 1 1 auto;
      order: 1;
      width: 100%;
      min-width: 0;
      max-width: none!important;
      margin: 0 auto!important;
      & + *,
      & + [row] { margin-top: 1.5em!important; }
      
      &[row="Sx"] { flex: 0 1 auto; }
    }
    
    & > cd-text-bubble,
    & > cd-text-bubble[row] {
      width: 100vw;
      margin-left: -3vw!important;
      margin-right: -3vw!important;
    }
    
    & > * > svg,
    & > * > img,
    & > [row] > svg,
    & > [row] > img {
      display: block;
      width: auto;
      height: auto;
      max-width: 94vw;
      max-height: 90vh;
      margin-left: auto;
      margin-right: auto;
    }
  }
}
