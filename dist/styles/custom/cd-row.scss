cd-row {
  display: flex;
  
  @media (min-width: $iPhoneLandscape+1) {
    flex-flow: row nowrap;
    
    // CONTAINER AS ROW: X alignment
    justify-content: space-around;
    &[row~="center"]        { justify-content: center; } // Must come first: it applies to both X and Y and needs to be easily overridden
    &[row~="left"]          { justify-content: flex-start; }
    &[row~="right"]         { justify-content: flex-end; }
    &[row~="space-around"]  { justify-content: space-around; }  // DEFAULT
    &[row~="space-between"] { justify-content: space-between; }
    
    // CONTAINER AS ROW: Y size & alignment
    align-items: center;
    &[row~="center"]   { align-items: center; } // DEFAULT, must come first: it applies to both X and Y and needs to be easily overridden
    &[row~="top"]      { align-items: flex-start; }
    &[row~="bottom"]   { align-items: flex-end; }
    &[row~="stretch"]  { align-items: stretch; } // Matches largest item
    &[row~="baseline"] { align-items: baseline; }
    
    // ITEM IN ROW: X size
    & > *         { flex: 1 1 auto; width: 0%; } // Grow to fit available space
    [row~="Sx"]   { flex: 0 1 auto; width: inherit; } // Shrink to fit content
    [row~="1x"]   { flex: 1 1 auto; width: 0%; } // DEFAULT
    [row~="2x"]   { flex: 2 1 auto; width: 0%; }
    [row~="3x"]   { flex: 3 1 auto; width: 0%; }
    [row~="4x"]   { flex: 4 1 auto; width: 0%; }
    [row~="5x"]   { flex: 5 1 auto; width: 0%; }
    [row~="1/2"]  { flex: 0 0 auto; width: 50%; }
    [row~="1/3"]  { flex: 0 0 auto; width: 33%; }
    [row~="2/3"]  { flex: 0 0 auto; width: 66%; }
    [row~="1/4"]  { flex: 0 0 auto; width: 25%; }
    [row~="2/4"]  { flex: 0 0 auto; width: 50%; }
    [row~="3/4"]  { flex: 0 0 auto; width: 75%; }
    [row~="1/5"]  { flex: 0 0 auto; width: 20%; }
    [row~="2/5"]  { flex: 0 0 auto; width: 40%; }
    [row~="3/5"]  { flex: 0 0 auto; width: 60%; }
    [row~="4/5"]  { flex: 0 0 auto; width: 80%; }
    // All of the above use width rather than flex-basis: https://github.com/philipwalton/flexbugs#7-flex-basis-doesnt-account-for-box-sizingborder-box
    & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
    & > p { max-width: 100%; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
    & > * { min-width: 0%; } // https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
    
    // ITEM IN ROW: Y size & alignment
    [row~="top"]      { align-self: flex-start; }
    [row~="center"]   { align-self: center; } // DEFAULT
    [row~="bottom"]   { align-self: flex-end; }
    [row~="stretch"]  { align-self: stretch; } // Matches largest item
    [row~="baseline"] { align-self: baseline; }
    
    // ITEM IN ROW: ordering
    & > *        { order: 1; }
    [row~="1st"] { order: 1; } // DEFAULT
    [row~="2nd"] { order: 2; }
    [row~="3rd"] { order: 3; }
    [row~="4th"] { order: 4; }
    [row~="5th"] { order: 5; }
  }
  
  @media (max-width: $iPhoneLandscape) {
    flex-flow: column nowrap;
    
    // CONTAINER AS COL: X size & alignment
    align-items: center;
    &[col~="left"]    { align-items: flex-start; }
    &[col^="center"]  { align-items: center; } // DEFAULT
    &[col~="right"]   { align-items: flex-end; }
    &[col~="stretch"] { align-items: stretch; }
    
    // CONTAINER AS COL: Y
    // There are no custom values for this — container height comes from intrinsic content height
    
    // ITEM AS COL: X size & alignment
    & > * { max-width: 100%; } // Using max-width gives us the desired behaviour, but it also prevents a flexbug: https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container
    & > p { max-width: 100%; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
    [col~="1/2"] { max-width: 50%; }
    [col~="1/3"] { max-width: 33%; }
    [col~="2/3"] { max-width: 66%; }
    [col~="1/4"] { max-width: 25%; }
    [col~="2/4"] { max-width: 50%; }
    [col~="3/4"] { max-width: 75%; }
    [col~="1/5"] { max-width: 20%; }
    [col~="2/5"] { max-width: 40%; }
    [col~="3/5"] { max-width: 60%; }
    [col~="4/5"] { max-width: 80%; }
    [col~="left"]    { align-self: flex-start; }
    [col~="center"]  { align-self: center; } // DEFAULT
    [col~="right"]   { align-self: flex-end; }
    [col~="stretch"] { align-self: stretch; }
    
    // ITEM AS COL: Y
    // There are no custom values for this — item height comes from intrinsic content height
    & > * { flex: 0 0 auto; }
    & > * + * { margin-top: 1em; } // Put some spacing between items
    & > * + p { margin-top: 1em; } // The above rule doesn't hit "p" elements, since they're included after this file at an equal specificity
    
    // ITEM AS COL: ordering
    & > *        { order: 1; }
    [col~="1st"] { order: 1; } // DEFAULT
    [col~="2nd"] { order: 2; }
    [col~="3rd"] { order: 3; }
    [col~="4th"] { order: 4; }
    [col~="5th"] { order: 5; }
  }
}

cd-row-old {
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  align-items: center;
  
  & > * {
    flex: 1 1 0%; // 0% fixes IE not respecting unitless flex-basis
    min-width: 0%; // Makes FF (correct) behave like (incorrect) Chrome, Safari, IE
  }
  
  // For now, you need to wrap images in something like a div
  & > * > img {
    max-width: 100%;
  }
  
  // IE11- fails when using an img directly inside cd-row. In the future, this will work.
  & > img {
    width: 0%; // Fixes stretching in all browsers
  }
  
  // The max-width on p tags causes a bug in IE11, and it's not really needed here anyway
  & > p {
    max-width: inherit;
  }
  
  @media (min-width: $iPhoneLandscape+1) {
    & > .size-1 { flex-grow: 1; }
    & > .size-2 { flex-grow: 2; }
    & > .size-3 { flex-grow: 3; }
    & > .size-4 { flex-grow: 4; }
    & > .size-5 { flex-grow: 5; }
  }

  @media (max-width: $iPhoneLandscape) {
    flex-flow: column nowrap;
    
    & > * { flex: 0 0 auto; }
    & > * + * { margin-top: 1em; }
    
    & > img { width: auto; }
    
    // For changing the display order of elements once we switch to our smaller layout
    .stack-1 { order: 1; }
    .stack-2 { order: 2; }
    .stack-3 { order: 3; }
    .stack-4 { order: 4; }
    .stack-5 { order: 5; }
  }
}
